"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TelegrafModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
const telegraf_1 = require("telegraf");
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const BotController_1 = require("./decorator/BotController");
let TelegrafModule = TelegrafModule_1 = class TelegrafModule {
    static forRootAsync({ useFactory, inject, imports }) {
        const providers = [
            {
                provide: telegraf_1.default,
                useFactory: async (ref, ...inject) => {
                    return Promise
                        .resolve()
                        .then(() => useFactory(...inject))
                        .then(({ token, options }) => {
                        return this.init(ref, token, options);
                    });
                },
                inject: [core_1.ModuleRef, ...(inject || [])],
            },
        ];
        return {
            imports,
            module: TelegrafModule_1,
            providers: providers,
            exports: providers,
        };
    }
    static forRoot(token, options) {
        const providers = [
            {
                provide: telegraf_1.default,
                useFactory: async (ref) => {
                    return this.init(ref, token, options);
                },
                inject: [core_1.ModuleRef],
            },
        ];
        return {
            module: TelegrafModule_1,
            providers: providers,
            exports: providers,
        };
    }
    static async init(ref, token, options) {
        const telegraf = new telegraf_1.default(token, options);
        BotController_1.handlers
            .filter((handler) => {
            return BotController_1.controllers.find((controller) => {
                return controller.class === handler.class;
            });
        })
            .forEach((handler) => {
            const object = ref.get(handler.class, { strict: false });
            if (!object) {
                return;
            }
            const func = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(object), handler.method);
            if (!func) {
                return;
            }
            if (handler.type === 'hears') {
                const triggers = handler.property[0];
                return telegraf.hears(triggers, (ctx, next) => {
                    const ctxProperty = BotController_1.properties.find((property) => {
                        return property.target === Object.getPrototypeOf(object) && property.propertyKey === func.value.name && property.type === 'context';
                    });
                    const nextProperty = BotController_1.properties.find((property) => {
                        return property.target === Object.getPrototypeOf(object) && property.propertyKey === func.value.name && property.type === 'next';
                    });
                    const args = [];
                    if (ctxProperty) {
                        args[ctxProperty.parameterIndex] = ctx;
                    }
                    if (nextProperty) {
                        args[nextProperty.parameterIndex] = next;
                    }
                    const object2 = ref.get(handler.class, { strict: false });
                    return func.value.apply(object2, args);
                });
            }
            return;
        });
        return telegraf;
    }
};
TelegrafModule = TelegrafModule_1 = __decorate([
    common_1.Module({})
], TelegrafModule);
exports.default = TelegrafModule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVsZWdyYWZNb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvVGVsZWdyYWZNb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsdUNBQXlFO0FBQ3pFLDJDQUE2RTtBQUM3RSx1Q0FBdUM7QUFDdkMsNkRBQTRFO0FBRzVFLElBQXFCLGNBQWMsc0JBQW5DLE1BQXFCLGNBQWM7SUFFeEIsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFvUjtRQUN4VSxNQUFNLFNBQVMsR0FBRztZQUNkO2dCQUNJLE9BQU8sRUFBRSxrQkFBUTtnQkFDakIsVUFBVSxFQUFFLEtBQUssRUFBRSxHQUFjLEVBQUUsR0FBRyxNQUEwQyxFQUFFLEVBQUU7b0JBQ2hGLE9BQU8sT0FBTzt5QkFDVCxPQUFPLEVBQUU7eUJBQ1QsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO3lCQUNqQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFO3dCQUN6QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztvQkFDMUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1gsQ0FBQztnQkFDRCxNQUFNLEVBQUUsQ0FBQyxnQkFBUyxFQUFFLEdBQUcsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUM7YUFDekM7U0FDSixDQUFDO1FBQ0YsT0FBTztZQUNILE9BQU87WUFDUCxNQUFNLEVBQUUsZ0JBQWM7WUFDdEIsU0FBUyxFQUFFLFNBQVM7WUFDcEIsT0FBTyxFQUFFLFNBQVM7U0FDckIsQ0FBQztJQUNOLENBQUM7SUFHTSxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQWEsRUFBRSxPQUF5QjtRQUMxRCxNQUFNLFNBQVMsR0FBRztZQUNkO2dCQUNJLE9BQU8sRUFB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